{"version":3,"sources":["alg.js","contractdeploy.js","setprice.js","buyers.js","nftsend.js","route.js","App.js","reportWebVitals.js","index.js"],"names":["Alg","state","useLocation","algosdk","require","name","em","email","buys","buy","token","algodclient","Algodv2","algoindexer","Indexer","waitForConfirmation","txId","a","status","do","response","lastround","pendingTransactionInformation","pendingInfo","console","log","statusAfterBlock","printCreatedAsset","account","assetid","accountInformation","accountInfo","idx","length","scrutinizedAsset","myparms","JSON","stringify","undefined","printAssetHolding","myassetholding","assetName","fetch","nftdata","json","resdata","getTransactionParams","params","fee","flatFee","program","Uint8Array","Buffer","from","args","push","lsig","makeLogicSig","addrc","address","txn","makeAssetCreateTxnWithSuggestedParams","rawSignedTxn","signLogicSigTransaction","blob","sendRawTransaction","result","ptx","assetID","transfer","method","headers","body","alert","addr1","addr2","id","prompt","revocationTarget","closeRemainderTo","note","opttxn","makeAssetTransferTxnWithSuggestedParams","opttx","opttxn2","rawSignedTxn2","opttx2","manager","reserve","freeze","clawback","ctxn","makeAssetConfigTxnWithSuggestedParams","ctx","userdata","resdata2","searchForTransactions","a1response","a1length","transactions","txid","a2response","amount","algosToMicroalgos","parseInt","bigamount","smallamount","balance","buy2","a1","a2","lis","waitForConfirmation1","algodClient","timeout","Error","startround","currentround","makePaymentTxnWithSuggestedParams","signedTxn","txID","toString","confirmedTxn","mytxinfo","string","TextDecoder","decode","onClick","create","Contract","nftname","metadata","js","className","align","bind","this","window","ethereum","enable","Web3","web3","givenProvider","tokendata","tokenId","accounts","selectedAddress","constructorArgs","contract","eth","deploy","data","arguments","send","newContractInstance","options","cAddress","nftContract","tx","methods","mintWithTokenURI","encodeABI","request","message","SetPrice","setnftname","setTokenState","setTokenPrice","items","call","approve","setrepeat","React","useEffect","repeat","price","useState","Buyers","nftnameparams","metadata2","js2","ethersend","abi","sendss","value","utils","toWei","transferFrom","wallet","resdata1","Nftsend","safeTransferFrom","nftsend","Routes","history","useHistory","url","URLSearchParams","location","search","get","setprice","algon","net","getId","navigation","pathname","alg","nftcreation","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fbac8bfc.chunk.js","sourcesContent":["import React from 'react';\r\nimport {useLocation} from 'react-router-dom';\r\nimport './alg.css';\r\n\r\n function Alg(){\r\n    const {state} = useLocation();\r\n    \r\n    const algosdk = require('algosdk');\r\n    \r\n  const name = state.name;\r\n  const em = state.email;\r\n  const buys = state.buy;\r\n  \r\n    const indexerserver = 'https://testnet-algorand.api.purestake.io/idx2';\r\n    const indexport='';\r\n    const server = \"https://testnet-algorand.api.purestake.io/ps2\";\r\n    const port = \"\";\r\n    const token = {\r\n        'X-API-key' : '0ZUqoC9fEd3NCgXW6V8SA8USTDFBupGGfArfcQK6',\r\n    }\r\n    let algodclient = new algosdk.Algodv2(token, server, port);\r\n    let algoindexer = new algosdk.Indexer(token,indexerserver,indexport);\r\n    \r\n     const waitForConfirmation = async function (algodclient, txId) {\r\n        let response = await algodclient.status().do();\r\n        let lastround = response[\"last-round\"];\r\n        while (true) {\r\n            const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\r\n            if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\r\n                console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\r\n                break;\r\n            }\r\n            lastround++;\r\n            await algodclient.statusAfterBlock(lastround).do();\r\n        }\r\n    };\r\n    \r\n    const printCreatedAsset = async function (algodclient, account, assetid) {\r\n       \r\n        let accountInfo = await algodclient.accountInformation(account).do();\r\n        for (let idx = 0; idx < accountInfo['created-assets'].length; idx++) {\r\n            let scrutinizedAsset = accountInfo['created-assets'][idx];\r\n            if (scrutinizedAsset['index'] === assetid) {\r\n                console.log(\"AssetID = \" + scrutinizedAsset['index']);\r\n                let myparms = JSON.stringify(scrutinizedAsset['params'], undefined, 2);\r\n                console.log(\"parms = \" + myparms);\r\n                break;\r\n            }\r\n        }\r\n    };\r\n   \r\n    const printAssetHolding = async function (algodclient, account, assetid) {\r\n        \r\n        let accountInfo = await algodclient.accountInformation(account).do();\r\n        for (let idx = 0; idx < accountInfo['assets'].length; idx++) {\r\n            let scrutinizedAsset = accountInfo['assets'][idx];\r\n            if (scrutinizedAsset['asset-id'] === assetid) {\r\n                let myassetholding = JSON.stringify(scrutinizedAsset, undefined, 2);\r\n                console.log(\"assetholdinginfo = \" + myassetholding);\r\n                break;\r\n            }\r\n        }\r\n    };\r\n    if(buys === 'true'){\r\n            buy();\r\n        }\r\n    \r\nasync function create(assetName){\r\n    const nftdata =await fetch(`https://nft-app-ec882-default-rtdb.firebaseio.com/NFT/${name}.json`,);\r\n    const resdata =await nftdata.json();\r\n    \r\n    let params = await algodclient.getTransactionParams().do();\r\n    params.fee = 100;\r\n    params.flatFee = true;\r\n    const program = new Uint8Array(Buffer.from('ASAEADoKAS0VIhJAACIvFSISQAAVLRUjEkAAAC4VIg1AAAAvFSQNQAAGLS4TQAAAJQ==', \"base64\"));\r\n    const args=[];\r\n    args.push([...Buffer.from(resdata['Wallet'])]);\r\n    args.push([...Buffer.from(assetName)]);\r\n    args.push([...Buffer.from(resdata['Image_url'])]);\r\n    args.push([...Buffer.from('')]);\r\n    let lsig = algosdk.makeLogicSig(program,args);\r\n    const addrc = lsig.address();\r\n    let note = undefined;    \r\n    let defaultFrozen = false;\r\n    let decimals = 0;\r\n    let totalIssuance = 1;\r\n    let unitName = \"ALGO\";\r\n    let assetMetadataHash = '';\r\n    \r\n    let txn = algosdk.makeAssetCreateTxnWithSuggestedParams(lsig.address(), note,\r\n         totalIssuance, decimals, defaultFrozen, addrc, addrc,addrc,\r\n        addrc, unitName, assetName, resdata['Image_url'], assetMetadataHash, params);\r\n    \r\n         let rawSignedTxn = algosdk.signLogicSigTransaction(txn, lsig).blob;\r\n        console.log('result: '+ rawSignedTxn);\r\n       let result = await algodclient.sendRawTransaction(rawSignedTxn).do();\r\n    await waitForConfirmation(algodclient, result.txId);\r\n    let ptx = await algodclient.pendingTransactionInformation(result.txId).do();\r\n    let assetID = ptx[\"asset-index\"];\r\n    await printCreatedAsset(algodclient,lsig.address(), assetID);\r\n    await printAssetHolding(algodclient,lsig.address(), assetID);\r\n    await transfer(lsig.address(),resdata['Wallet'],assetID);\r\n    await  fetch(`https://nft-app-ec882-default-rtdb.firebaseio.com/NFT/${name}.json`,\r\n    {\r\n      method:'PATCH',\r\n      headers:{\r\n        'CONTENT-TYPE': 'application/json',\r\n      },\r\n      body:JSON.stringify({\r\n        'ContractAddress': lsig.address(),\r\n        'Token': assetID,\r\n      })\r\n    }\r\n    );\r\n    alert('asset created successfully');\r\n}\r\n\r\nasync function transfer(addr1,addr2,id){\r\n    const nftdata =await fetch(`https://nft-app-ec882-default-rtdb.firebaseio.com/NFT/${name}.json`,);\r\n    const resdata =await nftdata.json();\r\n    if(addr1 === ''){\r\n        addr1 = resdata['WalletAddress'];\r\n    }\r\n    if(addr2 === ''){\r\n        addr2 = prompt(\"ENTER WALLET ADDRESS IN WHICH YOU NEED TO SEND YOUR NFT\");\r\n       console.log(addr2);\r\n    }\r\n    let program = new Uint8Array(Buffer.from(\"ASAEADoKAS0VIhJAACIvFSISQAAVLRUjEkAAAC4VIg1AAAAvFSQNQAAGLS4TQAAAJQ==\", \"base64\"));\r\n    const args=[];\r\n    args.push([...Buffer.from(addr1)]);\r\n    args.push([...Buffer.from(addr2)]);\r\n    args.push([...Buffer.from('')]);\r\n    \r\n    let lsig = algosdk.makeLogicSig(program,args);\r\n    let  params = await algodclient.getTransactionParams().do();\r\n      params.fee = 1000;\r\n      params.flatFee = true;\r\n      let revocationTarget = undefined;\r\n     let closeRemainderTo = undefined;\r\n       let  amount = 0;\r\n    let note = undefined;\r\n  \r\n       let opttxn = algosdk.makeAssetTransferTxnWithSuggestedParams(addr1, addr2, closeRemainderTo, revocationTarget,\r\n            amount, note, id, params);\r\n        \r\n       let rawSignedTxn = algosdk.signLogicSigTransaction(opttxn,lsig).blob;\r\n      let opttx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\r\n      console.log(\"Transaction : \" + opttx.txId);\r\n      \r\n      await waitForConfirmation(algodclient, opttx.txId);\r\n      let opttxn2 = algosdk.makeAssetTransferTxnWithSuggestedParams(addr2, addr2, closeRemainderTo, revocationTarget,\r\n          1, note, id, params);\r\n     \r\n     let rawSignedTxn2 = algosdk.signLogicSigTransaction(opttxn2,lsig).blob;\r\n    let opttx2 = (await algodclient.sendRawTransaction(rawSignedTxn2).do());\r\n    console.log(\"Transaction : \" + opttx2.txId);\r\n    \r\n    await waitForConfirmation(algodclient, opttx2.txId);\r\n     let manager = addr2;\r\n     let reserve = addr2;\r\n     let freeze = addr2;\r\n     let clawback = addr2;\r\n      let ctxn = algosdk.makeAssetConfigTxnWithSuggestedParams(addr1, note, \r\n      id, manager, reserve, freeze, clawback, params);\r\n  \r\n      rawSignedTxn = algosdk.signLogicSigTransaction(ctxn,lsig).blob;\r\n      let ctx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\r\n      console.log(\"Transaction : \" + ctx.txId);\r\n    \r\n      await waitForConfirmation(algodclient, ctx.txId);\r\n      await printCreatedAsset(algodclient,addr1, id);\r\n      await fetch(`https://nft-app-ec882-default-rtdb.firebaseio.com/NFT/${name}.json`,\r\n      {\r\n        method:'PATCH',\r\n        headers:{\r\n          'CONTENT-TYPE': 'application/json',\r\n        },\r\n        body:JSON.stringify({\r\n          'WalletAddress': addr2,\r\n        })\r\n      }\r\n      );\r\n  }\r\n  \r\n  async function buy(){\r\n    const nftdata =await fetch(`https://nft-app-ec882-default-rtdb.firebaseio.com/NFT/${name}.json`,);\r\n    const resdata =await nftdata.json();\r\n    const userdata = await fetch(`https://nft-app-ec882-default-rtdb.firebaseio.com/User/${em}.json`,);\r\n    const resdata2 = await userdata.json();\r\n    \r\n   let program = new Uint8Array(Buffer.from(\"ASAEADoKAS0VIhJAACIvFSISQAAVLRUjEkAAAC4VIg1AAAAvFSQNQAAGLS4TQAAAJQ==\", \"base64\"));\r\n   const args=[];\r\n    args.push([...Buffer.from('')]);\r\n   let lsig = algosdk.makeLogicSig(program,args);\r\n     \r\n      let a1response = await algoindexer.searchForTransactions()\r\n      .address(resdata2['algorand_address']).do();\r\n      let a1length = a1response.transactions.length;\r\n     let a2response = await algoindexer.searchForTransactions()\r\n     .address(lsig.address()).txid(a1response.transactions[a1length - 1].id).do();\r\n     \r\n    if(a2response.transactions.length !== 0){\r\n           if(a2response.transactions.amount !== algosdk.algosToMicroalgos(parseInt(resdata['Price']))){\r\n        let bigamount;\r\n        let smallamount;\r\n        if(a2response.transactions.amount > algosdk.algosToMicroalgos(parseInt(resdata['Price']))){\r\n            bigamount = a2response.transactions.amount;\r\n            smallamount = algosdk.algosToMicroalgos(parseInt(resdata['Price']));\r\n        }\r\n        else{\r\n            bigamount = algosdk.algosToMicroalgos(parseInt(resdata['Price']));\r\n            smallamount = a2response.transactions.amount;\r\n        }\r\n        let balance = bigamount - smallamount;\r\n       await buy2(lsig.address(),resdata2['algorand_address'],balance,lsig);\r\n           }\r\n   else{\r\n       await buy2(lsig.address(),resdata['WalletAddress'],algosdk.algosToMicroalgos(parseInt(resdata['Price'])),lsig);\r\n   }\r\n    \r\n      await transfer(resdata['WalletAddress'],resdata2['algorand_address'],resdata['Token']);\r\n      await fetch(`https://nft-app-ec882-default-rtdb.firebaseio.com/NFT/${name}.json`,\r\n      {\r\n        method:'PATCH',\r\n        headers:{\r\n          'CONTENT-TYPE': 'application/json',\r\n        },\r\n        body:JSON.stringify({\r\n         'buyed': 'true'\r\n        })\r\n      }\r\n      );\r\n    }\r\n  }\r\n  async function buy2(a1,a2,amount,lis){\r\n    let  params = await algodclient.getTransactionParams().do();\r\n    params.fee = 1000;\r\n  params.flatFee = true;\r\n    const waitForConfirmation1 = async function (algodClient, txId, timeout) {\r\n        if (algodClient == null || txId == null || timeout < 0) {\r\n            throw new Error(\"Bad arguments\");\r\n        }\r\n    \r\n        const status = (await algodClient.status().do());\r\n        if (status === undefined) {\r\n            throw new Error(\"Unable to get node status\");\r\n        }\r\n    \r\n        const startround = status[\"last-round\"] + 1;\r\n        let currentround = startround;\r\n    \r\n        while (currentround < (startround + timeout)) {\r\n            const pendingInfo = await algodClient.pendingTransactionInformation(txId).do();\r\n            if (pendingInfo !== undefined) {\r\n                if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\r\n                    //Got the completed Transaction\r\n                    return pendingInfo;\r\n                } else {\r\n                    if (pendingInfo[\"pool-error\"] != null && pendingInfo[\"pool-error\"].length > 0) {\r\n                        // If there was a pool error, then the transaction has been rejected!\r\n                        throw new Error(\"Transaction \" + txId + \" rejected - pool error: \" + pendingInfo[\"pool-error\"]);\r\n                    }\r\n                }\r\n            }\r\n            await algodClient.statusAfterBlock(currentround).do();\r\n            currentround++;\r\n        }\r\n    }\r\n    let txn = algosdk.makePaymentTxnWithSuggestedParams(a1,a2,amount,undefined,undefined,params);\r\n     \r\n    let signedTxn = algosdk.signLogicSigTransaction(txn,lis);\r\n    console.log('txn: '+ txn);\r\n    console.log(signedTxn);\r\nlet txId = txn.txID().toString();\r\nawait algodclient.sendRawTransaction(signedTxn.blob).do();\r\n        // Wait for confirmation\r\n        let confirmedTxn = await waitForConfirmation1(algodclient, txId, 4);\r\n        //Get the completed Transaction\r\n        console.log(\"Transaction \" + txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\r\n        let mytxinfo = JSON.stringify(confirmedTxn.txn.txn, undefined, 2);\r\n        console.log(\"Transaction information: %o\", mytxinfo);\r\n        var string = new TextDecoder().decode(confirmedTxn.txn.txn.note);\r\n        console.log(\"Note field: \", string);\r\n  }\r\n    return(<div>\r\n        \r\n     <button onClick={()=>create(name)}>CREATE</button>\r\n     <button onClick={()=>{transfer('','')}}>TRANSFER</button>\r\n    </div>);\r\n}\r\n\r\nexport default Alg;","import React from 'react';\r\nimport * as js  from \"./contracts/MyNFT.json\";\r\nimport './Contract.css';\r\nimport {useLocation} from 'react-router-dom';\r\n\r\nfunction Contract() {\r\n  const {state} = useLocation();\r\n    \r\n  const nftname = state;\r\n \r\n const metadata = js.default;\r\nconsole.log(nftname);\r\n  return (\r\n    <div className=\"App\">\r\n      <table align=\"center\">\r\n        <tr>\r\n         <td align=\"center\"><button className=\"b1\" onClick={check.bind(this,nftname)}>connect to wallet</button></td>\r\n        </tr>\r\n        <tr></tr>\r\n        <tr>\r\n          <td className='inf'>Please set your gas limit must be equal or greater than 5,991,856</td>\r\n        </tr>\r\n      </table>\r\n    </div>\r\n  );\r\n\r\n async function check(name) {\r\n\r\n    try{\r\n      if(window.ethereum){\r\n        await window.ethereum.enable();\r\n        \r\n         }\r\n      const Web3 = require('web3');\r\n      const web3 = new Web3(Web3.givenProvider);\r\n      \r\n      const nftdata = await fetch(`https://nft-app-ec882-default-rtdb.firebaseio.com/NFT/${name}.json`,);\r\n   \r\n      const resdata = await nftdata.json();\r\n     const token = await  fetch(`https://nft-app-ec882-default-rtdb.firebaseio.com/token.json`,);\r\n    const tokendata = await token.json();\r\n    \r\n   const tokenId = parseInt(tokendata['count']) + 1;\r\n\r\n     const accounts = window.ethereum.selectedAddress;\r\n\r\n     console.log(accounts);\r\n\r\n      const constructorArgs = [name,resdata['Nft_Symbol'],resdata['Image_url'],accounts,'0x69B4bfD57E10452658BCf483E7A4103bd5cFE92A'];\r\n\r\nlet contract = new web3.eth.Contract(metadata);\r\n\r\ncontract = await contract.deploy({\r\n      data:'',\r\n    arguments: constructorArgs,\r\n  \r\n});\r\n      \r\nconst newContractInstance = await contract.send({\r\n    from: accounts,\r\n   \r\n});\r\n    \r\n if(newContractInstance.options.address != null){\r\n   alert('your mint peocess are started');\r\n let cAddress = newContractInstance.options.address;\r\n          \r\n  const nftContract = new web3.eth.Contract(metadata,cAddress);\r\n\r\n\r\n \r\n\r\n  const tx = {\r\n    'from':accounts, \r\n    'to': cAddress,\r\n    'data': nftContract.methods.mintWithTokenURI(accounts,tokenId,resdata['Image_url']).encodeABI(),\r\n  };\r\n\r\n     await window.ethereum\r\n        .request({\r\n            method: 'eth_sendTransaction',\r\n            params: [tx],\r\n        });\r\n        fetch(`https://nft-app-ec882-default-rtdb.firebaseio.com/NFT/${name}.json`,\r\n        {\r\n          method:'PATCH',\r\n          headers:{\r\n            'CONTENT-TYPE': 'application/json',\r\n          },\r\n          body:JSON.stringify({\r\n            'WalletAddress': accounts,\r\n            'ContractAddress': cAddress,\r\n            'Token': tokenId,\r\n          })\r\n        }\r\n        );\r\n        \r\n        \r\n  \r\n  fetch(`https://nft-app-ec882-default-rtdb.firebaseio.com/token.json`,\r\n  {\r\n    method:'PATCH',\r\n    headers:{\r\n      'CONTENT-TYPE': 'application/json',\r\n    },\r\n    body:JSON.stringify({\r\n      'count': tokenId,\r\n    })\r\n  }\r\n  );\r\n      }\r\n \r\n    }\r\n     catch (error){\r\n       alert(error);\r\n       if(error.message === 'MetaMask Tx Signature: User denied transaction signature.'){\r\n        await fetch(`https://nft-app-ec882-default-rtdb.firebaseio.com/NFT/${name}.json`,{\r\n          method:'DELETE'\r\n        });\r\n        alert('your data has been removed');\r\n       }\r\n }\r\n}\r\n}\r\n\r\nexport default Contract;","import React,{useState} from 'react';\r\nimport * as js  from \"./contracts/MyNFT.json\";\r\nimport {useLocation} from 'react-router-dom';\r\n\r\nfunction SetPrice(){\r\n  const {state} = useLocation();\r\n  \r\n \r\n    React.useEffect(() => {\r\n     \r\n      \r\nif(repeat === true){\r\nprice();\r\n\r\n}\r\n    });\r\n    async function price(){\r\n      setnftname(state);\r\n\r\n     \r\n  try{\r\n const Web3 = require('web3');\r\n\r\n const web3 = new Web3(Web3.givenProvider);\r\n \r\n\r\n  if(window.ethereum){\r\n    await window.ethereum.enable();\r\n    \r\n     }\r\n     const accounts = window.ethereum.selectedAddress;\r\n\r\n   \r\n  if(nftname !== ''){\r\n    const nftdata = await fetch(`https://nft-app-ec882-default-rtdb.firebaseio.com/NFT/${nftname}.json`,);\r\n\r\n  const resdata = await nftdata.json();\r\n  const metadata = js.default;\r\n  const nftContract = new web3.eth.Contract(metadata,  resdata['ContractAddress']);\r\n  alert(`price:${resdata['Price']}`);\r\n \r\n \r\n  \r\n    await nftContract.methods.setTokenState([resdata['Token']],\"true\").send({from:accounts});\r\n    await nftContract.methods.setTokenPrice([resdata['Token']],resdata['Price']).send({from:accounts});\r\n    await nftContract.methods.items(resdata['Token']).call();\r\n    await nftContract.methods.approve( resdata['ContractAddress'], resdata['Token']).send({from:accounts});\r\n    fetch(`https://nft-app-ec882-default-rtdb.firebaseio.com/NFT/${nftname}.json`,\r\n    {\r\n      method:'PATCH',\r\n      headers:{\r\n        'CONTENT-TYPE': 'application/json',\r\n      },\r\n      body:JSON.stringify({\r\n       'setPrice': 'true'\r\n      })\r\n    }\r\n    );\r\n    alert('Price is successfully upadated in your nft and sended for sale'); \r\n    setrepeat(false);\r\n\r\n\r\n\r\n  }\r\n}\r\ncatch(e){\r\n    setrepeat(false);\r\nalert(e.message);\r\n\r\n\r\n}\r\n}\r\n    const[repeat,setrepeat] = useState(true);\r\n    const[nftname,setnftname] = useState('');\r\n    return(\r\n        <div>\r\n        <p>hello</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SetPrice;","import React,{useState} from 'react';\r\nimport * as js  from \"./contracts/MyNFT.json\";\r\nimport * as js2  from \"./contracts/ethsend.json\";\r\nimport {useLocation} from 'react-router-dom';\r\n\r\nfunction Buyers(){\r\n  const {state} = useLocation();\r\n    React.useEffect(() => {\r\n    \r\nif(repeat === true){\r\nbuy();\r\n\r\n}\r\n    });\r\n    async function buy(){\r\n      alert();\r\n      let nftnameparams = state.name;\r\n      let email = state.email;\r\n    try{\r\n      const Web3 = require('web3');\r\n\r\n      const web3 = new Web3(Web3.givenProvider);\r\n\r\n    if(window.ethereum){\r\n      await window.ethereum.enable();\r\n      \r\n       }\r\n\r\n       const accounts = window.ethereum.selectedAddress; \r\n\r\n          \r\n       \r\n    if(nftnameparams !== 'null'){\r\n      const nftdata = await fetch(`https://nft-app-ec882-default-rtdb.firebaseio.com/NFT/${nftnameparams}.json`,);\r\n \r\n    const resdata = await nftdata.json();\r\n    const metadata = js.default;\r\n    const metadata2 = js2.default;\r\n    const nftContract = new web3.eth.Contract(metadata,  resdata['ContractAddress']);\r\n    const ethersend = new web3.eth.Contract(metadata2.abi,'0x5fCCB9Db10A632d4B7854Aca76af5E8D77AD0466');\r\n  \r\n\r\n       await ethersend.methods.sendss(resdata['WalletAddress']).send({\r\n          from: accounts,\r\n          value: web3.utils.toWei(resdata['Price'].toString(), 'ether')//ether\r\n         });\r\n\r\n      \r\n       await nftContract.methods.transferFrom(resdata['WalletAddress'],accounts,resdata['Token']).send({\r\n          from: accounts\r\n        });\r\n      \r\n        const wallet = await  fetch(`https://nft-app-ec882-default-rtdb.firebaseio.com/User/${email}.json`);\r\n        const resdata1 = await wallet.json();\r\n          \r\n       await fetch(`https://nft-app-ec882-default-rtdb.firebaseio.com/NFT/${nftnameparams}.json`,\r\n        {\r\n          method:'PATCH',\r\n          headers:{\r\n            'CONTENT-TYPE': 'application/json',\r\n          },\r\n          \r\n          body:JSON.stringify({\r\n            'buyed': 'true',\r\n            'buyedowner': resdata1['address'],\r\n            'buyername': resdata1['user'],\r\n          })\r\n        }\r\n        );\r\n  alert('nft successfully Buyed');\r\n  setrepeat(false);\r\n    }\r\n  }\r\n  catch(e){\r\n  alert(e.message);\r\n \r\n  setrepeat(false);\r\n  }\r\n}\r\n    const[repeat,setrepeat] = useState(true);\r\n    return(\r\n        <div>\r\n        <p>hello</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Buyers;","import React,{useState} from 'react';\r\nimport * as js  from \"./contracts/MyNFT.json\";\r\nimport {useLocation} from 'react-router-dom';\r\n\r\nfunction Nftsend(){\r\n   const {state} = useLocation();\r\n   const[repeat,setrepeat] = useState(true);\r\n const[nftname,setnftname] = useState('');\r\n    React.useEffect(() => {\r\n      async function nftsend(){\r\n    \r\n        setnftname(state.name);\r\n       let email = state.email;\r\n      try{\r\n        const Web3 = require('web3');\r\n\r\n        const web3 = new Web3(Web3.givenProvider);\r\n  \r\n      if(window.ethereum){\r\n        await window.ethereum.enable();\r\n        \r\n         }\r\n         const accounts = prompt(\"ENTER WALLET ADDRESS IN WHICH YOU NEED TO SEND YOUR NFT\");\r\n  \r\n      if(nftname !== null){\r\n       \r\n  \r\n        const nftdata = await fetch(`https://nft-app-ec882-default-rtdb.firebaseio.com/NFT/${state}.json`,);\r\n   \r\n      const resdata = await nftdata.json();\r\n    \r\n      const wallet = await fetch(`https://nft-app-ec882-default-rtdb.firebaseio.com/User/${email}.json`);\r\n      const resdata2 = await wallet.json();\r\n    \r\n      const metadata = js.default;\r\n      const nftContract = new web3.eth.Contract(metadata,  resdata['ContractAddress']);\r\n    \r\n   \r\n      await nftContract.methods.safeTransferFrom(resdata['WalletAddress'],accounts,resdata['Token']).send({\r\n            from:resdata['WalletAddress']\r\n          });\r\n          fetch(`https://nft-app-ec882-default-rtdb.firebaseio.com/NFT/${state}.json`,\r\n          {\r\n            method:'PATCH',\r\n            headers:{\r\n              'CONTENT-TYPE': 'application/json',\r\n            },\r\n            body:JSON.stringify({\r\n                'WalletAddress': accounts,\r\n                'user': resdata2['user'],\r\n            })\r\n          }\r\n          );\r\n    alert('successfully nft transfer finished');\r\n     setrepeat(false);\r\n      }\r\n    }\r\n    catch(e){\r\n        setrepeat(false);\r\n        if(e.message === \"Cannot read property 'user' of null\"){\r\n          alert(\"Can't able to find the user account\");\r\n        }\r\n        else{\r\n    alert(e.message);\r\n        }\r\n   \r\n    }\r\n  }\r\nif(repeat === true){\r\nnftsend();\r\nsetrepeat(false);\r\n}\r\n    },[repeat,nftname,state]);\r\n\r\n   \r\n \r\n    return(\r\n        <div>\r\n        <p>hello</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Nftsend;","import React,{useState} from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction Routes() {\r\n    const history = useHistory();\r\n    const[repeat,setrepeat] = useState(true);\r\n  React.useEffect(() => { \r\n      \r\n        async function nftcreation(){\r\n        if(repeat === true){\r\n          if(window.ethereum){\r\n            await window.ethereum.enable();\r\n            \r\n             }\r\n          const Web3 = require('web3');\r\n          const web3 = new Web3(Web3.givenProvider);\r\n      \r\n          var url = new URLSearchParams(window.location.search);\r\n       \r\n          let nftnameparams = url.get('nftname');\r\n          let setprice = url.get('setprice');\r\n          let email = url.get('email');\r\n          let algon = url.get('algon');\r\n          let buy = url.get('buy');   \r\n          let id ;\r\n             if(algon !== 'true'){\r\n               id = await web3.eth.net.getId();\r\n             }\r\n      \r\n             const nftdata = await fetch(`https://nft-app-ec882-default-rtdb.firebaseio.com/NFT/${nftnameparams}.json`,);\r\n             const resdata = await nftdata.json(); \r\n             \r\n            \r\n             if(resdata !== null){\r\n               console.log(resdata);\r\n             if(resdata['Nft_Symbol'] === 'BNB' && id !== 0){\r\n              if(id === 97){\r\n                  navigation(nftnameparams,setprice,email,algon);\r\n              }\r\n              else{\r\n                alert(`please change your network to ${resdata['Nft_Symbol']}`);\r\n                \r\n              }\r\n             }\r\n             if(resdata['Nft_Symbol'] === 'MATICMUM' && id !== 0){\r\n              if(id === 80001){\r\n                  navigation(nftnameparams,setprice,email,algon);\r\n              }\r\n              else{\r\n                alert(`please change your network to ${resdata['Nft_Symbol']}(POLYGON)`);\r\n               \r\n              }\r\n             }\r\n             if(resdata['Nft_Symbol'] === 'ETH' && id !== 0){\r\n              if(id === 4){\r\n                  navigation(nftnameparams,setprice,email,algon);\r\n              }\r\n              else{\r\n                alert(`please change your network to ${resdata['Nft_Symbol']}`);\r\n               \r\n              }\r\n            }\r\n            if(algon === 'true'){\r\n              history.push({pathname:'/alg', state:{name:nftnameparams,email:email,buy:buy}});\r\n              console.log('work');\r\n        } \r\n            }\r\n           \r\n        }\r\n      setrepeat(false);\r\n      }\r\n      function navigation(name,price,email,alg){\r\n   \r\n        if(name !== null && price === null && email === null && alg === null){\r\n            history.push({\r\n                pathname:'/deploy',\r\n                state:name\r\n            });\r\n        }\r\n        if(price === 'true'){\r\n         \r\n           history.push({\r\n               pathname:'/price',\r\n               state:name\r\n           });\r\n        }\r\n        if(price === 'false'){\r\n         \r\n           history.push({pathname:'/buy', state:{name:name,email:email}});\r\n        }\r\n        if(price === 'transfer'){\r\n          history.push({\r\n            pathname:'/nftsend',\r\n            state:{name:name,email:email}\r\n          });\r\n       }\r\n      }\r\n       nftcreation();\r\n  },[repeat,history]);\r\n  \r\n  \r\n  return (\r\n    <div className=\"App\">\r\n     \r\n    </div>\r\n  );\r\n \r\n}\r\n\r\nexport default Routes;","import React  from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Contract from './contractdeploy';\nimport SetPrice from './setprice';\nimport Buyers from './buyers';\nimport Nftsend from './nftsend';\nimport Routes from './route';\nimport Alg from './alg';\n\nfunction App() {\n  return(\n    \n       <Router>\n    <Switch>\n      <Route exact path=\"/\" component={Routes} />\n      <Route path=\"/deploy\" component={Contract} />\n      <Route path=\"/price\" component={SetPrice}/>\n      <Route path=\"/buy\" component={Buyers}/>\n      <Route path=\"/nftsend\" component={Nftsend}/>\n      <Route path=\"/alg\" component = {Alg}/> \n    </Switch>\n  </Router>\n    \n  );\n}\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}